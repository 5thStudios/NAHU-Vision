//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Web;
using Umbraco.Core.Models;
using Umbraco.Core.Models.PublishedContent;
using Umbraco.Web;
using Umbraco.ModelsBuilder;
using Umbraco.ModelsBuilder.Umbraco;

namespace Umbraco.Web.PublishedContentModels
{
	// Mixin content Type 43094 with alias "textBlockContribute"
	/// <summary>Text Block- Contribute</summary>
	public partial interface ITextBlockContribute : IPublishedContent
	{
		/// <summary>Optional Side Panel</summary>
		string LblOptionalSidePanel { get; }

		/// <summary>Summary</summary>
		IHtmlString Summary { get; }

		/// <summary>Content</summary>
		IHtmlString Tb_content { get; }

		/// <summary>Show Ad</summary>
		bool Tb_showAd { get; }

		/// <summary>Show Side Navigation</summary>
		bool Tb_showSideNavigation { get; }

		/// <summary>Side on Right</summary>
		bool Tb_SideOnRight { get; }
	}

	/// <summary>Text Block- Contribute</summary>
	[PublishedContentModel("textBlockContribute")]
	public partial class TextBlockContribute : PublishedContentModel, ITextBlockContribute
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "textBlockContribute";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TextBlockContribute(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TextBlockContribute, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Optional Side Panel: The following is to display an optional side panel with navigation and ad space.
		///</summary>
		[ImplementPropertyType("lblOptionalSidePanel")]
		public string LblOptionalSidePanel
		{
			get { return GetLblOptionalSidePanel(this); }
		}

		/// <summary>Static getter for Optional Side Panel</summary>
		public static string GetLblOptionalSidePanel(ITextBlockContribute that) { return that.GetPropertyValue<string>("lblOptionalSidePanel"); }

		///<summary>
		/// Summary: The summary section is displayed in place of the content when the page is locked and the user is not logged into IMIS.
		///</summary>
		[ImplementPropertyType("summary")]
		public IHtmlString Summary
		{
			get { return GetSummary(this); }
		}

		/// <summary>Static getter for Summary</summary>
		public static IHtmlString GetSummary(ITextBlockContribute that) { return that.GetPropertyValue<IHtmlString>("summary"); }

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("tb_content")]
		public IHtmlString Tb_content
		{
			get { return GetTb_content(this); }
		}

		/// <summary>Static getter for Content</summary>
		public static IHtmlString GetTb_content(ITextBlockContribute that) { return that.GetPropertyValue<IHtmlString>("tb_content"); }

		///<summary>
		/// Show Ad
		///</summary>
		[ImplementPropertyType("tb_showAd")]
		public bool Tb_showAd
		{
			get { return GetTb_showAd(this); }
		}

		/// <summary>Static getter for Show Ad</summary>
		public static bool GetTb_showAd(ITextBlockContribute that) { return that.GetPropertyValue<bool>("tb_showAd"); }

		///<summary>
		/// Show Side Navigation: Side navigations start at the 3rd level and will only show 3rd and 4th level nodes that are marked to show in side navigation.
		///</summary>
		[ImplementPropertyType("tb_showSideNavigation")]
		public bool Tb_showSideNavigation
		{
			get { return GetTb_showSideNavigation(this); }
		}

		/// <summary>Static getter for Show Side Navigation</summary>
		public static bool GetTb_showSideNavigation(ITextBlockContribute that) { return that.GetPropertyValue<bool>("tb_showSideNavigation"); }

		///<summary>
		/// Side on Right: Default is the let-hand side.  Select if the side panel is to appear on the right.
		///</summary>
		[ImplementPropertyType("tb_SideOnRight")]
		public bool Tb_SideOnRight
		{
			get { return GetTb_SideOnRight(this); }
		}

		/// <summary>Static getter for Side on Right</summary>
		public static bool GetTb_SideOnRight(ITextBlockContribute that) { return that.GetPropertyValue<bool>("tb_SideOnRight"); }
	}
}
