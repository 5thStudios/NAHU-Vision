'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
'
Namespace org.nahu.members
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="MembershipWebServiceSoap", [Namespace]:="http://imis.com/webservices/membership")>  _
    Partial Public Class MembershipWebService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private LoginAndReturnSerializedAppPrincipalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginWithSerializedAppPrincipalOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LoginUserAndProvideCookiesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ValidateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDatabaseInformationOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRolesWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRolesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserTypeWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLogonAnnouncementOperationCompleted As System.Threading.SendOrPostCallback
        
        Private LogoutOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserForAuthenticatedUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GeneratePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateImisUserWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateImisUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RegisterWebUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteImisUserWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeleteImisUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRequiresQuestionAndAnswerWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetRequiresQuestionAndAnswerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordQuestionAndAnswerWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordQuestionAndAnswerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnlockUserWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UnlockUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ResetPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RequestLogonRecoverOperationCompleted As System.Threading.SendOrPostCallback
        
        Private RequestPasswordResetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserPasswordResetTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserKeyFromPasswordResetTokenOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeUsernameWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeUsernameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeUsernameForUserWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangeUsernameForUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUsernameChangesEnabledOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ChangePasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserPasswordWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetUserPassword2OperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateUserOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindUsersByNameWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindUsersByNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllUsersWithLoginOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAllUsersOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SetPropertyValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertyTypeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPropertyValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIsAnonymousOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLastActivityDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetLastUpdatedDateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetUserNameOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.mvcvb.My.MySettings.Default.mvcvb_org_nahu_members_MembershipWebService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event LoginAndReturnSerializedAppPrincipalCompleted As LoginAndReturnSerializedAppPrincipalCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginWithSerializedAppPrincipalCompleted As LoginWithSerializedAppPrincipalCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginUserCompleted As LoginUserCompletedEventHandler
        
        '''<remarks/>
        Public Event LoginUserAndProvideCookiesCompleted As LoginUserAndProvideCookiesCompletedEventHandler
        
        '''<remarks/>
        Public Event ValidateUserCompleted As ValidateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDatabaseInformationCompleted As GetDatabaseInformationCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRolesWithLoginCompleted As GetRolesWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRolesCompleted As GetRolesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserTypeWithLoginCompleted As GetUserTypeWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserTypeCompleted As GetUserTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLogonAnnouncementCompleted As GetLogonAnnouncementCompletedEventHandler
        
        '''<remarks/>
        Public Event LogoutCompleted As LogoutCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserForAuthenticatedUserCompleted As GetUserForAuthenticatedUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GeneratePasswordCompleted As GeneratePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateImisUserWithLoginCompleted As CreateImisUserWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateImisUserCompleted As CreateImisUserCompletedEventHandler
        
        '''<remarks/>
        Public Event RegisterWebUserCompleted As RegisterWebUserCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteImisUserWithLoginCompleted As DeleteImisUserWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event DeleteImisUserCompleted As DeleteImisUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserWithLoginCompleted As GetUserWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserCompleted As GetUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRequiresQuestionAndAnswerWithLoginCompleted As GetRequiresQuestionAndAnswerWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetRequiresQuestionAndAnswerCompleted As GetRequiresQuestionAndAnswerCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordQuestionAndAnswerWithLoginCompleted As ChangePasswordQuestionAndAnswerWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordQuestionAndAnswerCompleted As ChangePasswordQuestionAndAnswerCompletedEventHandler
        
        '''<remarks/>
        Public Event UnlockUserWithLoginCompleted As UnlockUserWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event UnlockUserCompleted As UnlockUserCompletedEventHandler
        
        '''<remarks/>
        Public Event ResetPasswordCompleted As ResetPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event RequestLogonRecoverCompleted As RequestLogonRecoverCompletedEventHandler
        
        '''<remarks/>
        Public Event RequestPasswordResetCompleted As RequestPasswordResetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserPasswordResetTokenCompleted As GetUserPasswordResetTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserKeyFromPasswordResetTokenCompleted As GetUserKeyFromPasswordResetTokenCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeUsernameWithLoginCompleted As ChangeUsernameWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeUsernameCompleted As ChangeUsernameCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeUsernameForUserWithLoginCompleted As ChangeUsernameForUserWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangeUsernameForUserCompleted As ChangeUsernameForUserCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUsernameChangesEnabledCompleted As GetUsernameChangesEnabledCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordWithLoginCompleted As ChangePasswordWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event ChangePasswordCompleted As ChangePasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserPasswordWithLoginCompleted As SetUserPasswordWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserPasswordCompleted As SetUserPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event SetUserPassword2Completed As SetUserPassword2CompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserWithLoginCompleted As UpdateUserWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateUserCompleted As UpdateUserCompletedEventHandler
        
        '''<remarks/>
        Public Event FindUsersByNameWithLoginCompleted As FindUsersByNameWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event FindUsersByNameCompleted As FindUsersByNameCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllUsersWithLoginCompleted As GetAllUsersWithLoginCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAllUsersCompleted As GetAllUsersCompletedEventHandler
        
        '''<remarks/>
        Public Event SetPropertyValueCompleted As SetPropertyValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertyTypeCompleted As GetPropertyTypeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPropertyValueCompleted As GetPropertyValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIsAnonymousCompleted As GetIsAnonymousCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLastActivityDateCompleted As GetLastActivityDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetLastUpdatedDateCompleted As GetLastUpdatedDateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetUserNameCompleted As GetUserNameCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/LoginAndReturnSerializedAppPrincipal", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoginAndReturnSerializedAppPrincipal(ByVal username As String, ByVal password As String) As String
            Dim results() As Object = Me.Invoke("LoginAndReturnSerializedAppPrincipal", New Object() {username, password})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginAndReturnSerializedAppPrincipalAsync(ByVal username As String, ByVal password As String)
            Me.LoginAndReturnSerializedAppPrincipalAsync(username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginAndReturnSerializedAppPrincipalAsync(ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.LoginAndReturnSerializedAppPrincipalOperationCompleted Is Nothing) Then
                Me.LoginAndReturnSerializedAppPrincipalOperationCompleted = AddressOf Me.OnLoginAndReturnSerializedAppPrincipalOperationCompleted
            End If
            Me.InvokeAsync("LoginAndReturnSerializedAppPrincipal", New Object() {username, password}, Me.LoginAndReturnSerializedAppPrincipalOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginAndReturnSerializedAppPrincipalOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginAndReturnSerializedAppPrincipalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginAndReturnSerializedAppPrincipalCompleted(Me, New LoginAndReturnSerializedAppPrincipalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/LoginWithSerializedAppPrincipal", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoginWithSerializedAppPrincipal(ByVal principal As String) As LogonResultCodes
            Dim results() As Object = Me.Invoke("LoginWithSerializedAppPrincipal", New Object() {principal})
            Return CType(results(0),LogonResultCodes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginWithSerializedAppPrincipalAsync(ByVal principal As String)
            Me.LoginWithSerializedAppPrincipalAsync(principal, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginWithSerializedAppPrincipalAsync(ByVal principal As String, ByVal userState As Object)
            If (Me.LoginWithSerializedAppPrincipalOperationCompleted Is Nothing) Then
                Me.LoginWithSerializedAppPrincipalOperationCompleted = AddressOf Me.OnLoginWithSerializedAppPrincipalOperationCompleted
            End If
            Me.InvokeAsync("LoginWithSerializedAppPrincipal", New Object() {principal}, Me.LoginWithSerializedAppPrincipalOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginWithSerializedAppPrincipalOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginWithSerializedAppPrincipalCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginWithSerializedAppPrincipalCompleted(Me, New LoginWithSerializedAppPrincipalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/LoginUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoginUser(ByVal username As String, ByVal password As String, ByVal staffUser As Boolean) As LogonResultCodes
            Dim results() As Object = Me.Invoke("LoginUser", New Object() {username, password, staffUser})
            Return CType(results(0),LogonResultCodes)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginUserAsync(ByVal username As String, ByVal password As String, ByVal staffUser As Boolean)
            Me.LoginUserAsync(username, password, staffUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginUserAsync(ByVal username As String, ByVal password As String, ByVal staffUser As Boolean, ByVal userState As Object)
            If (Me.LoginUserOperationCompleted Is Nothing) Then
                Me.LoginUserOperationCompleted = AddressOf Me.OnLoginUserOperationCompleted
            End If
            Me.InvokeAsync("LoginUser", New Object() {username, password, staffUser}, Me.LoginUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginUserCompleted(Me, New LoginUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/LoginUserAndProvideCookies", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function LoginUserAndProvideCookies(ByVal username As String, ByVal password As String, ByVal staffUser As Boolean) As String
            Dim results() As Object = Me.Invoke("LoginUserAndProvideCookies", New Object() {username, password, staffUser})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub LoginUserAndProvideCookiesAsync(ByVal username As String, ByVal password As String, ByVal staffUser As Boolean)
            Me.LoginUserAndProvideCookiesAsync(username, password, staffUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LoginUserAndProvideCookiesAsync(ByVal username As String, ByVal password As String, ByVal staffUser As Boolean, ByVal userState As Object)
            If (Me.LoginUserAndProvideCookiesOperationCompleted Is Nothing) Then
                Me.LoginUserAndProvideCookiesOperationCompleted = AddressOf Me.OnLoginUserAndProvideCookiesOperationCompleted
            End If
            Me.InvokeAsync("LoginUserAndProvideCookies", New Object() {username, password, staffUser}, Me.LoginUserAndProvideCookiesOperationCompleted, userState)
        End Sub
        
        Private Sub OnLoginUserAndProvideCookiesOperationCompleted(ByVal arg As Object)
            If (Not (Me.LoginUserAndProvideCookiesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LoginUserAndProvideCookiesCompleted(Me, New LoginUserAndProvideCookiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ValidateUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ValidateUser(ByVal username As String, ByVal password As String) As Boolean
            Dim results() As Object = Me.Invoke("ValidateUser", New Object() {username, password})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ValidateUserAsync(ByVal username As String, ByVal password As String)
            Me.ValidateUserAsync(username, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ValidateUserAsync(ByVal username As String, ByVal password As String, ByVal userState As Object)
            If (Me.ValidateUserOperationCompleted Is Nothing) Then
                Me.ValidateUserOperationCompleted = AddressOf Me.OnValidateUserOperationCompleted
            End If
            Me.InvokeAsync("ValidateUser", New Object() {username, password}, Me.ValidateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnValidateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.ValidateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ValidateUserCompleted(Me, New ValidateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetDatabaseInformation", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDatabaseInformation(ByRef server As String, ByRef database As String, ByRef username As String, ByRef password As String) As Boolean
            Dim results() As Object = Me.Invoke("GetDatabaseInformation", New Object(-1) {})
            server = CType(results(1),String)
            database = CType(results(2),String)
            username = CType(results(3),String)
            password = CType(results(4),String)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDatabaseInformationAsync()
            Me.GetDatabaseInformationAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDatabaseInformationAsync(ByVal userState As Object)
            If (Me.GetDatabaseInformationOperationCompleted Is Nothing) Then
                Me.GetDatabaseInformationOperationCompleted = AddressOf Me.OnGetDatabaseInformationOperationCompleted
            End If
            Me.InvokeAsync("GetDatabaseInformation", New Object(-1) {}, Me.GetDatabaseInformationOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDatabaseInformationOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDatabaseInformationCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDatabaseInformationCompleted(Me, New GetDatabaseInformationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetRolesWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRolesWithLogin(ByVal loginAsUser As String, ByVal loginPassword As String) As String()
            Dim results() As Object = Me.Invoke("GetRolesWithLogin", New Object() {loginAsUser, loginPassword})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRolesWithLoginAsync(ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.GetRolesWithLoginAsync(loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRolesWithLoginAsync(ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetRolesWithLoginOperationCompleted Is Nothing) Then
                Me.GetRolesWithLoginOperationCompleted = AddressOf Me.OnGetRolesWithLoginOperationCompleted
            End If
            Me.InvokeAsync("GetRolesWithLogin", New Object() {loginAsUser, loginPassword}, Me.GetRolesWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRolesWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRolesWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRolesWithLoginCompleted(Me, New GetRolesWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetRoles", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRoles() As String()
            Dim results() As Object = Me.Invoke("GetRoles", New Object(-1) {})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRolesAsync()
            Me.GetRolesAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRolesAsync(ByVal userState As Object)
            If (Me.GetRolesOperationCompleted Is Nothing) Then
                Me.GetRolesOperationCompleted = AddressOf Me.OnGetRolesOperationCompleted
            End If
            Me.InvokeAsync("GetRoles", New Object(-1) {}, Me.GetRolesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRolesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRolesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRolesCompleted(Me, New GetRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserTypeWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserTypeWithLogin(ByVal loginAsUser As String, ByVal loginPassword As String) As UserType
            Dim results() As Object = Me.Invoke("GetUserTypeWithLogin", New Object() {loginAsUser, loginPassword})
            Return CType(results(0),UserType)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserTypeWithLoginAsync(ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.GetUserTypeWithLoginAsync(loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserTypeWithLoginAsync(ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetUserTypeWithLoginOperationCompleted Is Nothing) Then
                Me.GetUserTypeWithLoginOperationCompleted = AddressOf Me.OnGetUserTypeWithLoginOperationCompleted
            End If
            Me.InvokeAsync("GetUserTypeWithLogin", New Object() {loginAsUser, loginPassword}, Me.GetUserTypeWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserTypeWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserTypeWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserTypeWithLoginCompleted(Me, New GetUserTypeWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserType", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserType() As UserType
            Dim results() As Object = Me.Invoke("GetUserType", New Object(-1) {})
            Return CType(results(0),UserType)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserTypeAsync()
            Me.GetUserTypeAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserTypeAsync(ByVal userState As Object)
            If (Me.GetUserTypeOperationCompleted Is Nothing) Then
                Me.GetUserTypeOperationCompleted = AddressOf Me.OnGetUserTypeOperationCompleted
            End If
            Me.InvokeAsync("GetUserType", New Object(-1) {}, Me.GetUserTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserTypeCompleted(Me, New GetUserTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetLogonAnnouncement", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLogonAnnouncement(ByRef logonDelaySeconds As Long) As String
            Dim results() As Object = Me.Invoke("GetLogonAnnouncement", New Object(-1) {})
            logonDelaySeconds = CType(results(1),Long)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLogonAnnouncementAsync()
            Me.GetLogonAnnouncementAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLogonAnnouncementAsync(ByVal userState As Object)
            If (Me.GetLogonAnnouncementOperationCompleted Is Nothing) Then
                Me.GetLogonAnnouncementOperationCompleted = AddressOf Me.OnGetLogonAnnouncementOperationCompleted
            End If
            Me.InvokeAsync("GetLogonAnnouncement", New Object(-1) {}, Me.GetLogonAnnouncementOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLogonAnnouncementOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLogonAnnouncementCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLogonAnnouncementCompleted(Me, New GetLogonAnnouncementCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/Logout", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub Logout()
            Me.Invoke("Logout", New Object(-1) {})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync()
            Me.LogoutAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub LogoutAsync(ByVal userState As Object)
            If (Me.LogoutOperationCompleted Is Nothing) Then
                Me.LogoutOperationCompleted = AddressOf Me.OnLogoutOperationCompleted
            End If
            Me.InvokeAsync("Logout", New Object(-1) {}, Me.LogoutOperationCompleted, userState)
        End Sub
        
        Private Sub OnLogoutOperationCompleted(ByVal arg As Object)
            If (Not (Me.LogoutCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent LogoutCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserForAuthenticatedUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserForAuthenticatedUser(ByVal userIsOnline As Boolean) As WebServiceProxyableMembershipUser
            Dim results() As Object = Me.Invoke("GetUserForAuthenticatedUser", New Object() {userIsOnline})
            Return CType(results(0),WebServiceProxyableMembershipUser)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserForAuthenticatedUserAsync(ByVal userIsOnline As Boolean)
            Me.GetUserForAuthenticatedUserAsync(userIsOnline, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserForAuthenticatedUserAsync(ByVal userIsOnline As Boolean, ByVal userState As Object)
            If (Me.GetUserForAuthenticatedUserOperationCompleted Is Nothing) Then
                Me.GetUserForAuthenticatedUserOperationCompleted = AddressOf Me.OnGetUserForAuthenticatedUserOperationCompleted
            End If
            Me.InvokeAsync("GetUserForAuthenticatedUser", New Object() {userIsOnline}, Me.GetUserForAuthenticatedUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserForAuthenticatedUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserForAuthenticatedUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserForAuthenticatedUserCompleted(Me, New GetUserForAuthenticatedUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GeneratePassword", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GeneratePassword() As String
            Dim results() As Object = Me.Invoke("GeneratePassword", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GeneratePasswordAsync()
            Me.GeneratePasswordAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GeneratePasswordAsync(ByVal userState As Object)
            If (Me.GeneratePasswordOperationCompleted Is Nothing) Then
                Me.GeneratePasswordOperationCompleted = AddressOf Me.OnGeneratePasswordOperationCompleted
            End If
            Me.InvokeAsync("GeneratePassword", New Object(-1) {}, Me.GeneratePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGeneratePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GeneratePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GeneratePasswordCompleted(Me, New GeneratePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/CreateImisUserWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateImisUserWithLogin(ByVal staffUser As Boolean, ByVal webUser As Boolean, ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean, ByVal loginAsUser As String, ByVal loginPassword As String) As WebServiceProxyableMembershipUser
            Dim results() As Object = Me.Invoke("CreateImisUserWithLogin", New Object() {staffUser, webUser, contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved, loginAsUser, loginPassword})
            Return CType(results(0),WebServiceProxyableMembershipUser)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateImisUserWithLoginAsync(ByVal staffUser As Boolean, ByVal webUser As Boolean, ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.CreateImisUserWithLoginAsync(staffUser, webUser, contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateImisUserWithLoginAsync(ByVal staffUser As Boolean, ByVal webUser As Boolean, ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.CreateImisUserWithLoginOperationCompleted Is Nothing) Then
                Me.CreateImisUserWithLoginOperationCompleted = AddressOf Me.OnCreateImisUserWithLoginOperationCompleted
            End If
            Me.InvokeAsync("CreateImisUserWithLogin", New Object() {staffUser, webUser, contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved, loginAsUser, loginPassword}, Me.CreateImisUserWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateImisUserWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateImisUserWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateImisUserWithLoginCompleted(Me, New CreateImisUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/CreateImisUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateImisUser(ByVal staffUser As Boolean, ByVal webUser As Boolean, ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean) As WebServiceProxyableMembershipUser
            Dim results() As Object = Me.Invoke("CreateImisUser", New Object() {staffUser, webUser, contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved})
            Return CType(results(0),WebServiceProxyableMembershipUser)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateImisUserAsync(ByVal staffUser As Boolean, ByVal webUser As Boolean, ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean)
            Me.CreateImisUserAsync(staffUser, webUser, contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateImisUserAsync(ByVal staffUser As Boolean, ByVal webUser As Boolean, ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean, ByVal userState As Object)
            If (Me.CreateImisUserOperationCompleted Is Nothing) Then
                Me.CreateImisUserOperationCompleted = AddressOf Me.OnCreateImisUserOperationCompleted
            End If
            Me.InvokeAsync("CreateImisUser", New Object() {staffUser, webUser, contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved}, Me.CreateImisUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateImisUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateImisUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateImisUserCompleted(Me, New CreateImisUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/RegisterWebUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function RegisterWebUser(ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean) As WebServiceProxyableMembershipUser
            Dim results() As Object = Me.Invoke("RegisterWebUser", New Object() {contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved})
            Return CType(results(0),WebServiceProxyableMembershipUser)
        End Function
        
        '''<remarks/>
        Public Overloads Sub RegisterWebUserAsync(ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean)
            Me.RegisterWebUserAsync(contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RegisterWebUserAsync(ByVal contactID As String, ByVal username As String, ByVal password As String, ByVal email As String, ByVal passwordQuestion As String, ByVal passwordAnswer As String, ByVal isApproved As Boolean, ByVal userState As Object)
            If (Me.RegisterWebUserOperationCompleted Is Nothing) Then
                Me.RegisterWebUserOperationCompleted = AddressOf Me.OnRegisterWebUserOperationCompleted
            End If
            Me.InvokeAsync("RegisterWebUser", New Object() {contactID, username, password, email, passwordQuestion, passwordAnswer, isApproved}, Me.RegisterWebUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnRegisterWebUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.RegisterWebUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RegisterWebUserCompleted(Me, New RegisterWebUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/DeleteImisUserWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteImisUserWithLogin(ByVal deleteStaffUser As Boolean, ByVal deleteWebUser As Boolean, ByVal username As String, ByVal loginAsUser As String, ByVal loginPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteImisUserWithLogin", New Object() {deleteStaffUser, deleteWebUser, username, loginAsUser, loginPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteImisUserWithLoginAsync(ByVal deleteStaffUser As Boolean, ByVal deleteWebUser As Boolean, ByVal username As String, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.DeleteImisUserWithLoginAsync(deleteStaffUser, deleteWebUser, username, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteImisUserWithLoginAsync(ByVal deleteStaffUser As Boolean, ByVal deleteWebUser As Boolean, ByVal username As String, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.DeleteImisUserWithLoginOperationCompleted Is Nothing) Then
                Me.DeleteImisUserWithLoginOperationCompleted = AddressOf Me.OnDeleteImisUserWithLoginOperationCompleted
            End If
            Me.InvokeAsync("DeleteImisUserWithLogin", New Object() {deleteStaffUser, deleteWebUser, username, loginAsUser, loginPassword}, Me.DeleteImisUserWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteImisUserWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteImisUserWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteImisUserWithLoginCompleted(Me, New DeleteImisUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/DeleteImisUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeleteImisUser(ByVal deleteStaffUser As Boolean, ByVal deleteWebUser As Boolean, ByVal username As String) As Boolean
            Dim results() As Object = Me.Invoke("DeleteImisUser", New Object() {deleteStaffUser, deleteWebUser, username})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeleteImisUserAsync(ByVal deleteStaffUser As Boolean, ByVal deleteWebUser As Boolean, ByVal username As String)
            Me.DeleteImisUserAsync(deleteStaffUser, deleteWebUser, username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeleteImisUserAsync(ByVal deleteStaffUser As Boolean, ByVal deleteWebUser As Boolean, ByVal username As String, ByVal userState As Object)
            If (Me.DeleteImisUserOperationCompleted Is Nothing) Then
                Me.DeleteImisUserOperationCompleted = AddressOf Me.OnDeleteImisUserOperationCompleted
            End If
            Me.InvokeAsync("DeleteImisUser", New Object() {deleteStaffUser, deleteWebUser, username}, Me.DeleteImisUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeleteImisUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeleteImisUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeleteImisUserCompleted(Me, New DeleteImisUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserWithLogin(ByVal username As String, ByVal userIsOnline As Boolean, ByVal loginAsUser As String, ByVal loginPassword As String) As WebServiceProxyableMembershipUser
            Dim results() As Object = Me.Invoke("GetUserWithLogin", New Object() {username, userIsOnline, loginAsUser, loginPassword})
            Return CType(results(0),WebServiceProxyableMembershipUser)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserWithLoginAsync(ByVal username As String, ByVal userIsOnline As Boolean, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.GetUserWithLoginAsync(username, userIsOnline, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserWithLoginAsync(ByVal username As String, ByVal userIsOnline As Boolean, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetUserWithLoginOperationCompleted Is Nothing) Then
                Me.GetUserWithLoginOperationCompleted = AddressOf Me.OnGetUserWithLoginOperationCompleted
            End If
            Me.InvokeAsync("GetUserWithLogin", New Object() {username, userIsOnline, loginAsUser, loginPassword}, Me.GetUserWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserWithLoginCompleted(Me, New GetUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUser(ByVal username As String, ByVal userIsOnline As Boolean) As WebServiceProxyableMembershipUser
            Dim results() As Object = Me.Invoke("GetUser", New Object() {username, userIsOnline})
            Return CType(results(0),WebServiceProxyableMembershipUser)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserAsync(ByVal username As String, ByVal userIsOnline As Boolean)
            Me.GetUserAsync(username, userIsOnline, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserAsync(ByVal username As String, ByVal userIsOnline As Boolean, ByVal userState As Object)
            If (Me.GetUserOperationCompleted Is Nothing) Then
                Me.GetUserOperationCompleted = AddressOf Me.OnGetUserOperationCompleted
            End If
            Me.InvokeAsync("GetUser", New Object() {username, userIsOnline}, Me.GetUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserCompleted(Me, New GetUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetRequiresQuestionAndAnswerWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRequiresQuestionAndAnswerWithLogin(ByVal loginAsUser As String, ByVal loginPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("GetRequiresQuestionAndAnswerWithLogin", New Object() {loginAsUser, loginPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRequiresQuestionAndAnswerWithLoginAsync(ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.GetRequiresQuestionAndAnswerWithLoginAsync(loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRequiresQuestionAndAnswerWithLoginAsync(ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetRequiresQuestionAndAnswerWithLoginOperationCompleted Is Nothing) Then
                Me.GetRequiresQuestionAndAnswerWithLoginOperationCompleted = AddressOf Me.OnGetRequiresQuestionAndAnswerWithLoginOperationCompleted
            End If
            Me.InvokeAsync("GetRequiresQuestionAndAnswerWithLogin", New Object() {loginAsUser, loginPassword}, Me.GetRequiresQuestionAndAnswerWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRequiresQuestionAndAnswerWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRequiresQuestionAndAnswerWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRequiresQuestionAndAnswerWithLoginCompleted(Me, New GetRequiresQuestionAndAnswerWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetRequiresQuestionAndAnswer", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRequiresQuestionAndAnswer() As Boolean
            Dim results() As Object = Me.Invoke("GetRequiresQuestionAndAnswer", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetRequiresQuestionAndAnswerAsync()
            Me.GetRequiresQuestionAndAnswerAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetRequiresQuestionAndAnswerAsync(ByVal userState As Object)
            If (Me.GetRequiresQuestionAndAnswerOperationCompleted Is Nothing) Then
                Me.GetRequiresQuestionAndAnswerOperationCompleted = AddressOf Me.OnGetRequiresQuestionAndAnswerOperationCompleted
            End If
            Me.InvokeAsync("GetRequiresQuestionAndAnswer", New Object(-1) {}, Me.GetRequiresQuestionAndAnswerOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetRequiresQuestionAndAnswerOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetRequiresQuestionAndAnswerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetRequiresQuestionAndAnswerCompleted(Me, New GetRequiresQuestionAndAnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangePasswordQuestionAndAnswerWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePasswordQuestionAndAnswerWithLogin(ByVal password As String, ByVal newPasswordQuestion As String, ByVal newPasswordAnswer As String, ByVal loginAsUser As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangePasswordQuestionAndAnswerWithLogin", New Object() {password, newPasswordQuestion, newPasswordAnswer, loginAsUser})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordQuestionAndAnswerWithLoginAsync(ByVal password As String, ByVal newPasswordQuestion As String, ByVal newPasswordAnswer As String, ByVal loginAsUser As String)
            Me.ChangePasswordQuestionAndAnswerWithLoginAsync(password, newPasswordQuestion, newPasswordAnswer, loginAsUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordQuestionAndAnswerWithLoginAsync(ByVal password As String, ByVal newPasswordQuestion As String, ByVal newPasswordAnswer As String, ByVal loginAsUser As String, ByVal userState As Object)
            If (Me.ChangePasswordQuestionAndAnswerWithLoginOperationCompleted Is Nothing) Then
                Me.ChangePasswordQuestionAndAnswerWithLoginOperationCompleted = AddressOf Me.OnChangePasswordQuestionAndAnswerWithLoginOperationCompleted
            End If
            Me.InvokeAsync("ChangePasswordQuestionAndAnswerWithLogin", New Object() {password, newPasswordQuestion, newPasswordAnswer, loginAsUser}, Me.ChangePasswordQuestionAndAnswerWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordQuestionAndAnswerWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordQuestionAndAnswerWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordQuestionAndAnswerWithLoginCompleted(Me, New ChangePasswordQuestionAndAnswerWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangePasswordQuestionAndAnswer", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePasswordQuestionAndAnswer(ByVal password As String, ByVal newPasswordQuestion As String, ByVal newPasswordAnswer As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangePasswordQuestionAndAnswer", New Object() {password, newPasswordQuestion, newPasswordAnswer})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordQuestionAndAnswerAsync(ByVal password As String, ByVal newPasswordQuestion As String, ByVal newPasswordAnswer As String)
            Me.ChangePasswordQuestionAndAnswerAsync(password, newPasswordQuestion, newPasswordAnswer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordQuestionAndAnswerAsync(ByVal password As String, ByVal newPasswordQuestion As String, ByVal newPasswordAnswer As String, ByVal userState As Object)
            If (Me.ChangePasswordQuestionAndAnswerOperationCompleted Is Nothing) Then
                Me.ChangePasswordQuestionAndAnswerOperationCompleted = AddressOf Me.OnChangePasswordQuestionAndAnswerOperationCompleted
            End If
            Me.InvokeAsync("ChangePasswordQuestionAndAnswer", New Object() {password, newPasswordQuestion, newPasswordAnswer}, Me.ChangePasswordQuestionAndAnswerOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordQuestionAndAnswerOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordQuestionAndAnswerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordQuestionAndAnswerCompleted(Me, New ChangePasswordQuestionAndAnswerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/UnlockUserWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnlockUserWithLogin(ByVal username As String, ByVal loginAsUser As String, ByVal loginPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("UnlockUserWithLogin", New Object() {username, loginAsUser, loginPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnlockUserWithLoginAsync(ByVal username As String, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.UnlockUserWithLoginAsync(username, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnlockUserWithLoginAsync(ByVal username As String, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.UnlockUserWithLoginOperationCompleted Is Nothing) Then
                Me.UnlockUserWithLoginOperationCompleted = AddressOf Me.OnUnlockUserWithLoginOperationCompleted
            End If
            Me.InvokeAsync("UnlockUserWithLogin", New Object() {username, loginAsUser, loginPassword}, Me.UnlockUserWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnlockUserWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnlockUserWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnlockUserWithLoginCompleted(Me, New UnlockUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/UnlockUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UnlockUser(ByVal username As String) As Boolean
            Dim results() As Object = Me.Invoke("UnlockUser", New Object() {username})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UnlockUserAsync(ByVal username As String)
            Me.UnlockUserAsync(username, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UnlockUserAsync(ByVal username As String, ByVal userState As Object)
            If (Me.UnlockUserOperationCompleted Is Nothing) Then
                Me.UnlockUserOperationCompleted = AddressOf Me.OnUnlockUserOperationCompleted
            End If
            Me.InvokeAsync("UnlockUser", New Object() {username}, Me.UnlockUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnUnlockUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.UnlockUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UnlockUserCompleted(Me, New UnlockUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ResetPassword", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub ResetPassword(ByVal username As String, ByVal passwordAnswer As String)
            Me.Invoke("ResetPassword", New Object() {username, passwordAnswer})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ResetPasswordAsync(ByVal username As String, ByVal passwordAnswer As String)
            Me.ResetPasswordAsync(username, passwordAnswer, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ResetPasswordAsync(ByVal username As String, ByVal passwordAnswer As String, ByVal userState As Object)
            If (Me.ResetPasswordOperationCompleted Is Nothing) Then
                Me.ResetPasswordOperationCompleted = AddressOf Me.OnResetPasswordOperationCompleted
            End If
            Me.InvokeAsync("ResetPassword", New Object() {username, passwordAnswer}, Me.ResetPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnResetPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ResetPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ResetPasswordCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/RequestLogonRecover", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RequestLogonRecover(ByVal username As String, ByVal emailAddress As String, ByVal subject As String, ByVal loginUrl As String)
            Me.Invoke("RequestLogonRecover", New Object() {username, emailAddress, subject, loginUrl})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestLogonRecoverAsync(ByVal username As String, ByVal emailAddress As String, ByVal subject As String, ByVal loginUrl As String)
            Me.RequestLogonRecoverAsync(username, emailAddress, subject, loginUrl, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestLogonRecoverAsync(ByVal username As String, ByVal emailAddress As String, ByVal subject As String, ByVal loginUrl As String, ByVal userState As Object)
            If (Me.RequestLogonRecoverOperationCompleted Is Nothing) Then
                Me.RequestLogonRecoverOperationCompleted = AddressOf Me.OnRequestLogonRecoverOperationCompleted
            End If
            Me.InvokeAsync("RequestLogonRecover", New Object() {username, emailAddress, subject, loginUrl}, Me.RequestLogonRecoverOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequestLogonRecoverOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequestLogonRecoverCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequestLogonRecoverCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/RequestPasswordReset", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub RequestPasswordReset(ByVal username As String, ByVal emailAddress As String, ByVal subject As String, ByVal loginUrl As String)
            Me.Invoke("RequestPasswordReset", New Object() {username, emailAddress, subject, loginUrl})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestPasswordResetAsync(ByVal username As String, ByVal emailAddress As String, ByVal subject As String, ByVal loginUrl As String)
            Me.RequestPasswordResetAsync(username, emailAddress, subject, loginUrl, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub RequestPasswordResetAsync(ByVal username As String, ByVal emailAddress As String, ByVal subject As String, ByVal loginUrl As String, ByVal userState As Object)
            If (Me.RequestPasswordResetOperationCompleted Is Nothing) Then
                Me.RequestPasswordResetOperationCompleted = AddressOf Me.OnRequestPasswordResetOperationCompleted
            End If
            Me.InvokeAsync("RequestPasswordReset", New Object() {username, emailAddress, subject, loginUrl}, Me.RequestPasswordResetOperationCompleted, userState)
        End Sub
        
        Private Sub OnRequestPasswordResetOperationCompleted(ByVal arg As Object)
            If (Not (Me.RequestPasswordResetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent RequestPasswordResetCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserPasswordResetToken", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserPasswordResetToken(ByVal userKey As System.Guid) As String
            Dim results() As Object = Me.Invoke("GetUserPasswordResetToken", New Object() {userKey})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserPasswordResetTokenAsync(ByVal userKey As System.Guid)
            Me.GetUserPasswordResetTokenAsync(userKey, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserPasswordResetTokenAsync(ByVal userKey As System.Guid, ByVal userState As Object)
            If (Me.GetUserPasswordResetTokenOperationCompleted Is Nothing) Then
                Me.GetUserPasswordResetTokenOperationCompleted = AddressOf Me.OnGetUserPasswordResetTokenOperationCompleted
            End If
            Me.InvokeAsync("GetUserPasswordResetToken", New Object() {userKey}, Me.GetUserPasswordResetTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserPasswordResetTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserPasswordResetTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserPasswordResetTokenCompleted(Me, New GetUserPasswordResetTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserKeyFromPasswordResetToken", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserKeyFromPasswordResetToken(ByVal token As String) As System.Guid
            Dim results() As Object = Me.Invoke("GetUserKeyFromPasswordResetToken", New Object() {token})
            Return CType(results(0),System.Guid)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserKeyFromPasswordResetTokenAsync(ByVal token As String)
            Me.GetUserKeyFromPasswordResetTokenAsync(token, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserKeyFromPasswordResetTokenAsync(ByVal token As String, ByVal userState As Object)
            If (Me.GetUserKeyFromPasswordResetTokenOperationCompleted Is Nothing) Then
                Me.GetUserKeyFromPasswordResetTokenOperationCompleted = AddressOf Me.OnGetUserKeyFromPasswordResetTokenOperationCompleted
            End If
            Me.InvokeAsync("GetUserKeyFromPasswordResetToken", New Object() {token}, Me.GetUserKeyFromPasswordResetTokenOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserKeyFromPasswordResetTokenOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserKeyFromPasswordResetTokenCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserKeyFromPasswordResetTokenCompleted(Me, New GetUserKeyFromPasswordResetTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangeUsernameWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeUsernameWithLogin(ByVal newUsername As String, ByVal password As String, ByVal loginAsUser As String, ByVal loginPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangeUsernameWithLogin", New Object() {newUsername, password, loginAsUser, loginPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeUsernameWithLoginAsync(ByVal newUsername As String, ByVal password As String, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.ChangeUsernameWithLoginAsync(newUsername, password, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUsernameWithLoginAsync(ByVal newUsername As String, ByVal password As String, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.ChangeUsernameWithLoginOperationCompleted Is Nothing) Then
                Me.ChangeUsernameWithLoginOperationCompleted = AddressOf Me.OnChangeUsernameWithLoginOperationCompleted
            End If
            Me.InvokeAsync("ChangeUsernameWithLogin", New Object() {newUsername, password, loginAsUser, loginPassword}, Me.ChangeUsernameWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeUsernameWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeUsernameWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeUsernameWithLoginCompleted(Me, New ChangeUsernameWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangeUsername", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeUsername(ByVal newUsername As String, ByVal password As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangeUsername", New Object() {newUsername, password})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeUsernameAsync(ByVal newUsername As String, ByVal password As String)
            Me.ChangeUsernameAsync(newUsername, password, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUsernameAsync(ByVal newUsername As String, ByVal password As String, ByVal userState As Object)
            If (Me.ChangeUsernameOperationCompleted Is Nothing) Then
                Me.ChangeUsernameOperationCompleted = AddressOf Me.OnChangeUsernameOperationCompleted
            End If
            Me.InvokeAsync("ChangeUsername", New Object() {newUsername, password}, Me.ChangeUsernameOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeUsernameOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeUsernameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeUsernameCompleted(Me, New ChangeUsernameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangeUsernameForUserWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeUsernameForUserWithLogin(ByVal oldUsername As String, ByVal newUsername As String, ByVal loginAsUser As String, ByVal loginPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangeUsernameForUserWithLogin", New Object() {oldUsername, newUsername, loginAsUser, loginPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeUsernameForUserWithLoginAsync(ByVal oldUsername As String, ByVal newUsername As String, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.ChangeUsernameForUserWithLoginAsync(oldUsername, newUsername, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUsernameForUserWithLoginAsync(ByVal oldUsername As String, ByVal newUsername As String, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.ChangeUsernameForUserWithLoginOperationCompleted Is Nothing) Then
                Me.ChangeUsernameForUserWithLoginOperationCompleted = AddressOf Me.OnChangeUsernameForUserWithLoginOperationCompleted
            End If
            Me.InvokeAsync("ChangeUsernameForUserWithLogin", New Object() {oldUsername, newUsername, loginAsUser, loginPassword}, Me.ChangeUsernameForUserWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeUsernameForUserWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeUsernameForUserWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeUsernameForUserWithLoginCompleted(Me, New ChangeUsernameForUserWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangeUsernameForUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangeUsernameForUser(ByVal oldUsername As String, ByVal newUsername As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangeUsernameForUser", New Object() {oldUsername, newUsername})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangeUsernameForUserAsync(ByVal oldUsername As String, ByVal newUsername As String)
            Me.ChangeUsernameForUserAsync(oldUsername, newUsername, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangeUsernameForUserAsync(ByVal oldUsername As String, ByVal newUsername As String, ByVal userState As Object)
            If (Me.ChangeUsernameForUserOperationCompleted Is Nothing) Then
                Me.ChangeUsernameForUserOperationCompleted = AddressOf Me.OnChangeUsernameForUserOperationCompleted
            End If
            Me.InvokeAsync("ChangeUsernameForUser", New Object() {oldUsername, newUsername}, Me.ChangeUsernameForUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangeUsernameForUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangeUsernameForUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangeUsernameForUserCompleted(Me, New ChangeUsernameForUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUsernameChangesEnabled", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUsernameChangesEnabled() As Boolean
            Dim results() As Object = Me.Invoke("GetUsernameChangesEnabled", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUsernameChangesEnabledAsync()
            Me.GetUsernameChangesEnabledAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUsernameChangesEnabledAsync(ByVal userState As Object)
            If (Me.GetUsernameChangesEnabledOperationCompleted Is Nothing) Then
                Me.GetUsernameChangesEnabledOperationCompleted = AddressOf Me.OnGetUsernameChangesEnabledOperationCompleted
            End If
            Me.InvokeAsync("GetUsernameChangesEnabled", New Object(-1) {}, Me.GetUsernameChangesEnabledOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUsernameChangesEnabledOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUsernameChangesEnabledCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUsernameChangesEnabledCompleted(Me, New GetUsernameChangesEnabledCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangePasswordWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePasswordWithLogin(ByVal oldPassword As String, ByVal newPassword As String, ByVal loginAsUser As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangePasswordWithLogin", New Object() {oldPassword, newPassword, loginAsUser})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordWithLoginAsync(ByVal oldPassword As String, ByVal newPassword As String, ByVal loginAsUser As String)
            Me.ChangePasswordWithLoginAsync(oldPassword, newPassword, loginAsUser, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordWithLoginAsync(ByVal oldPassword As String, ByVal newPassword As String, ByVal loginAsUser As String, ByVal userState As Object)
            If (Me.ChangePasswordWithLoginOperationCompleted Is Nothing) Then
                Me.ChangePasswordWithLoginOperationCompleted = AddressOf Me.OnChangePasswordWithLoginOperationCompleted
            End If
            Me.InvokeAsync("ChangePasswordWithLogin", New Object() {oldPassword, newPassword, loginAsUser}, Me.ChangePasswordWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordWithLoginCompleted(Me, New ChangePasswordWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/ChangePassword", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ChangePassword(ByVal oldPassword As String, ByVal newPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("ChangePassword", New Object() {oldPassword, newPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal oldPassword As String, ByVal newPassword As String)
            Me.ChangePasswordAsync(oldPassword, newPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ChangePasswordAsync(ByVal oldPassword As String, ByVal newPassword As String, ByVal userState As Object)
            If (Me.ChangePasswordOperationCompleted Is Nothing) Then
                Me.ChangePasswordOperationCompleted = AddressOf Me.OnChangePasswordOperationCompleted
            End If
            Me.InvokeAsync("ChangePassword", New Object() {oldPassword, newPassword}, Me.ChangePasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnChangePasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.ChangePasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ChangePasswordCompleted(Me, New ChangePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/SetUserPasswordWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetUserPasswordWithLogin(ByVal username As String, ByVal newPassword As String, ByVal loginAsUser As String, ByVal loginPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("SetUserPasswordWithLogin", New Object() {username, newPassword, loginAsUser, loginPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetUserPasswordWithLoginAsync(ByVal username As String, ByVal newPassword As String, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.SetUserPasswordWithLoginAsync(username, newPassword, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserPasswordWithLoginAsync(ByVal username As String, ByVal newPassword As String, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.SetUserPasswordWithLoginOperationCompleted Is Nothing) Then
                Me.SetUserPasswordWithLoginOperationCompleted = AddressOf Me.OnSetUserPasswordWithLoginOperationCompleted
            End If
            Me.InvokeAsync("SetUserPasswordWithLogin", New Object() {username, newPassword, loginAsUser, loginPassword}, Me.SetUserPasswordWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserPasswordWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserPasswordWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserPasswordWithLoginCompleted(Me, New SetUserPasswordWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/SetUserPassword", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetUserPassword(ByVal username As String, ByVal newPassword As String) As Boolean
            Dim results() As Object = Me.Invoke("SetUserPassword", New Object() {username, newPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetUserPasswordAsync(ByVal username As String, ByVal newPassword As String)
            Me.SetUserPasswordAsync(username, newPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserPasswordAsync(ByVal username As String, ByVal newPassword As String, ByVal userState As Object)
            If (Me.SetUserPasswordOperationCompleted Is Nothing) Then
                Me.SetUserPasswordOperationCompleted = AddressOf Me.OnSetUserPasswordOperationCompleted
            End If
            Me.InvokeAsync("SetUserPassword", New Object() {username, newPassword}, Me.SetUserPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserPasswordCompleted(Me, New SetUserPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/SetUserPassword2", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SetUserPassword2(ByVal username As String, ByVal newPassword As String, ByVal sendEmail As Boolean) As Boolean
            Dim results() As Object = Me.Invoke("SetUserPassword2", New Object() {username, newPassword, sendEmail})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SetUserPassword2Async(ByVal username As String, ByVal newPassword As String, ByVal sendEmail As Boolean)
            Me.SetUserPassword2Async(username, newPassword, sendEmail, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetUserPassword2Async(ByVal username As String, ByVal newPassword As String, ByVal sendEmail As Boolean, ByVal userState As Object)
            If (Me.SetUserPassword2OperationCompleted Is Nothing) Then
                Me.SetUserPassword2OperationCompleted = AddressOf Me.OnSetUserPassword2OperationCompleted
            End If
            Me.InvokeAsync("SetUserPassword2", New Object() {username, newPassword, sendEmail}, Me.SetUserPassword2OperationCompleted, userState)
        End Sub
        
        Private Sub OnSetUserPassword2OperationCompleted(ByVal arg As Object)
            If (Not (Me.SetUserPassword2CompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetUserPassword2Completed(Me, New SetUserPassword2CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/UpdateUserWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateUserWithLogin(ByVal wsmu As WebServiceProxyableMembershipUser, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.Invoke("UpdateUserWithLogin", New Object() {wsmu, loginAsUser, loginPassword})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserWithLoginAsync(ByVal wsmu As WebServiceProxyableMembershipUser, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.UpdateUserWithLoginAsync(wsmu, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserWithLoginAsync(ByVal wsmu As WebServiceProxyableMembershipUser, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.UpdateUserWithLoginOperationCompleted Is Nothing) Then
                Me.UpdateUserWithLoginOperationCompleted = AddressOf Me.OnUpdateUserWithLoginOperationCompleted
            End If
            Me.InvokeAsync("UpdateUserWithLogin", New Object() {wsmu, loginAsUser, loginPassword}, Me.UpdateUserWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserWithLoginCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/UpdateUser", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub UpdateUser(ByVal wsmu As WebServiceProxyableMembershipUser)
            Me.Invoke("UpdateUser", New Object() {wsmu})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAsync(ByVal wsmu As WebServiceProxyableMembershipUser)
            Me.UpdateUserAsync(wsmu, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateUserAsync(ByVal wsmu As WebServiceProxyableMembershipUser, ByVal userState As Object)
            If (Me.UpdateUserOperationCompleted Is Nothing) Then
                Me.UpdateUserOperationCompleted = AddressOf Me.OnUpdateUserOperationCompleted
            End If
            Me.InvokeAsync("UpdateUser", New Object() {wsmu}, Me.UpdateUserOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateUserOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateUserCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateUserCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/FindUsersByNameWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindUsersByNameWithLogin(ByVal usernameToMatch As String, ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal loginAsUser As String, ByVal loginPassword As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> WebServiceProxyableSearchResult
            Dim results() As Object = Me.Invoke("FindUsersByNameWithLogin", New Object() {usernameToMatch, pageIndex, pageSize, loginAsUser, loginPassword})
            Return CType(results(0),WebServiceProxyableSearchResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindUsersByNameWithLoginAsync(ByVal usernameToMatch As String, ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.FindUsersByNameWithLoginAsync(usernameToMatch, pageIndex, pageSize, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindUsersByNameWithLoginAsync(ByVal usernameToMatch As String, ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.FindUsersByNameWithLoginOperationCompleted Is Nothing) Then
                Me.FindUsersByNameWithLoginOperationCompleted = AddressOf Me.OnFindUsersByNameWithLoginOperationCompleted
            End If
            Me.InvokeAsync("FindUsersByNameWithLogin", New Object() {usernameToMatch, pageIndex, pageSize, loginAsUser, loginPassword}, Me.FindUsersByNameWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindUsersByNameWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindUsersByNameWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindUsersByNameWithLoginCompleted(Me, New FindUsersByNameWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/FindUsersByName", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindUsersByName(ByVal usernameToMatch As String, ByVal pageIndex As Integer, ByVal pageSize As Integer) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> WebServiceProxyableSearchResult
            Dim results() As Object = Me.Invoke("FindUsersByName", New Object() {usernameToMatch, pageIndex, pageSize})
            Return CType(results(0),WebServiceProxyableSearchResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindUsersByNameAsync(ByVal usernameToMatch As String, ByVal pageIndex As Integer, ByVal pageSize As Integer)
            Me.FindUsersByNameAsync(usernameToMatch, pageIndex, pageSize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindUsersByNameAsync(ByVal usernameToMatch As String, ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal userState As Object)
            If (Me.FindUsersByNameOperationCompleted Is Nothing) Then
                Me.FindUsersByNameOperationCompleted = AddressOf Me.OnFindUsersByNameOperationCompleted
            End If
            Me.InvokeAsync("FindUsersByName", New Object() {usernameToMatch, pageIndex, pageSize}, Me.FindUsersByNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindUsersByNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindUsersByNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindUsersByNameCompleted(Me, New FindUsersByNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetAllUsersWithLogin", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllUsersWithLogin(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal loginAsUser As String, ByVal loginPassword As String) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> WebServiceProxyableSearchResult
            Dim results() As Object = Me.Invoke("GetAllUsersWithLogin", New Object() {pageIndex, pageSize, loginAsUser, loginPassword})
            Return CType(results(0),WebServiceProxyableSearchResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllUsersWithLoginAsync(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal loginAsUser As String, ByVal loginPassword As String)
            Me.GetAllUsersWithLoginAsync(pageIndex, pageSize, loginAsUser, loginPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllUsersWithLoginAsync(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal loginAsUser As String, ByVal loginPassword As String, ByVal userState As Object)
            If (Me.GetAllUsersWithLoginOperationCompleted Is Nothing) Then
                Me.GetAllUsersWithLoginOperationCompleted = AddressOf Me.OnGetAllUsersWithLoginOperationCompleted
            End If
            Me.InvokeAsync("GetAllUsersWithLogin", New Object() {pageIndex, pageSize, loginAsUser, loginPassword}, Me.GetAllUsersWithLoginOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllUsersWithLoginOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllUsersWithLoginCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllUsersWithLoginCompleted(Me, New GetAllUsersWithLoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetAllUsers", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAllUsers(ByVal pageIndex As Integer, ByVal pageSize As Integer) As <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> WebServiceProxyableSearchResult
            Dim results() As Object = Me.Invoke("GetAllUsers", New Object() {pageIndex, pageSize})
            Return CType(results(0),WebServiceProxyableSearchResult)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAllUsersAsync(ByVal pageIndex As Integer, ByVal pageSize As Integer)
            Me.GetAllUsersAsync(pageIndex, pageSize, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAllUsersAsync(ByVal pageIndex As Integer, ByVal pageSize As Integer, ByVal userState As Object)
            If (Me.GetAllUsersOperationCompleted Is Nothing) Then
                Me.GetAllUsersOperationCompleted = AddressOf Me.OnGetAllUsersOperationCompleted
            End If
            Me.InvokeAsync("GetAllUsers", New Object() {pageIndex, pageSize}, Me.GetAllUsersOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAllUsersOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAllUsersCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAllUsersCompleted(Me, New GetAllUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/SetPropertyValue", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Sub SetPropertyValue(ByVal propertyName As String, ByVal propertyValue As Object)
            Me.Invoke("SetPropertyValue", New Object() {propertyName, propertyValue})
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPropertyValueAsync(ByVal propertyName As String, ByVal propertyValue As Object)
            Me.SetPropertyValueAsync(propertyName, propertyValue, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SetPropertyValueAsync(ByVal propertyName As String, ByVal propertyValue As Object, ByVal userState As Object)
            If (Me.SetPropertyValueOperationCompleted Is Nothing) Then
                Me.SetPropertyValueOperationCompleted = AddressOf Me.OnSetPropertyValueOperationCompleted
            End If
            Me.InvokeAsync("SetPropertyValue", New Object() {propertyName, propertyValue}, Me.SetPropertyValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnSetPropertyValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.SetPropertyValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SetPropertyValueCompleted(Me, New System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetPropertyType", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertyType(ByVal propertyName As String) As String
            Dim results() As Object = Me.Invoke("GetPropertyType", New Object() {propertyName})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertyTypeAsync(ByVal propertyName As String)
            Me.GetPropertyTypeAsync(propertyName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertyTypeAsync(ByVal propertyName As String, ByVal userState As Object)
            If (Me.GetPropertyTypeOperationCompleted Is Nothing) Then
                Me.GetPropertyTypeOperationCompleted = AddressOf Me.OnGetPropertyTypeOperationCompleted
            End If
            Me.InvokeAsync("GetPropertyType", New Object() {propertyName}, Me.GetPropertyTypeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertyTypeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertyTypeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertyTypeCompleted(Me, New GetPropertyTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetPropertyValue", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPropertyValue(ByVal propertyName As String) As Object
            Dim results() As Object = Me.Invoke("GetPropertyValue", New Object() {propertyName})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPropertyValueAsync(ByVal propertyName As String)
            Me.GetPropertyValueAsync(propertyName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPropertyValueAsync(ByVal propertyName As String, ByVal userState As Object)
            If (Me.GetPropertyValueOperationCompleted Is Nothing) Then
                Me.GetPropertyValueOperationCompleted = AddressOf Me.OnGetPropertyValueOperationCompleted
            End If
            Me.InvokeAsync("GetPropertyValue", New Object() {propertyName}, Me.GetPropertyValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPropertyValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPropertyValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPropertyValueCompleted(Me, New GetPropertyValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetIsAnonymous", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIsAnonymous() As Boolean
            Dim results() As Object = Me.Invoke("GetIsAnonymous", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIsAnonymousAsync()
            Me.GetIsAnonymousAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIsAnonymousAsync(ByVal userState As Object)
            If (Me.GetIsAnonymousOperationCompleted Is Nothing) Then
                Me.GetIsAnonymousOperationCompleted = AddressOf Me.OnGetIsAnonymousOperationCompleted
            End If
            Me.InvokeAsync("GetIsAnonymous", New Object(-1) {}, Me.GetIsAnonymousOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIsAnonymousOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIsAnonymousCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIsAnonymousCompleted(Me, New GetIsAnonymousCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetLastActivityDate", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLastActivityDate() As Date
            Dim results() As Object = Me.Invoke("GetLastActivityDate", New Object(-1) {})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLastActivityDateAsync()
            Me.GetLastActivityDateAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLastActivityDateAsync(ByVal userState As Object)
            If (Me.GetLastActivityDateOperationCompleted Is Nothing) Then
                Me.GetLastActivityDateOperationCompleted = AddressOf Me.OnGetLastActivityDateOperationCompleted
            End If
            Me.InvokeAsync("GetLastActivityDate", New Object(-1) {}, Me.GetLastActivityDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLastActivityDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLastActivityDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLastActivityDateCompleted(Me, New GetLastActivityDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetLastUpdatedDate", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLastUpdatedDate() As Date
            Dim results() As Object = Me.Invoke("GetLastUpdatedDate", New Object(-1) {})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetLastUpdatedDateAsync()
            Me.GetLastUpdatedDateAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetLastUpdatedDateAsync(ByVal userState As Object)
            If (Me.GetLastUpdatedDateOperationCompleted Is Nothing) Then
                Me.GetLastUpdatedDateOperationCompleted = AddressOf Me.OnGetLastUpdatedDateOperationCompleted
            End If
            Me.InvokeAsync("GetLastUpdatedDate", New Object(-1) {}, Me.GetLastUpdatedDateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetLastUpdatedDateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetLastUpdatedDateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetLastUpdatedDateCompleted(Me, New GetLastUpdatedDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://imis.com/webservices/membership/GetUserName", RequestNamespace:="http://imis.com/webservices/membership", ResponseNamespace:="http://imis.com/webservices/membership", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserName() As String
            Dim results() As Object = Me.Invoke("GetUserName", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetUserNameAsync()
            Me.GetUserNameAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetUserNameAsync(ByVal userState As Object)
            If (Me.GetUserNameOperationCompleted Is Nothing) Then
                Me.GetUserNameOperationCompleted = AddressOf Me.OnGetUserNameOperationCompleted
            End If
            Me.InvokeAsync("GetUserName", New Object(-1) {}, Me.GetUserNameOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetUserNameOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetUserNameCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetUserNameCompleted(Me, New GetUserNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://imis.com/webservices/membership")>  _
    Public Enum LogonResultCodes
        
        '''<remarks/>
        Succeeded
        
        '''<remarks/>
        Failed
        
        '''<remarks/>
        LockedOut
        
        '''<remarks/>
        Disabled
        
        '''<remarks/>
        MaintenanceMode
        
        '''<remarks/>
        ProductExpired
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://imis.com/webservices/membership")>  _
    Public Enum UserType
        
        '''<remarks/>
        Anonymous
        
        '''<remarks/>
        [Public]
        
        '''<remarks/>
        Casual
        
        '''<remarks/>
        Full
    End Enum
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://imis.com/webservices/membership")>  _
    Partial Public Class WebServiceProxyableMembershipUser
        
        Private userNameField As String
        
        Private providerUserKeyField As String
        
        Private emailField As String
        
        Private passwordQuestionField As String
        
        Private commentField As String
        
        Private isApprovedField As Boolean
        
        Private isLockedOutField As Boolean
        
        Private lastLockoutDateField As Date
        
        Private creationDateField As Date
        
        Private lastLoginDateField As Date
        
        Private lastActivityDateField As Date
        
        Private lastPasswordChangedDateField As Date
        
        Private isOnlineField As Boolean
        
        Private providerNameField As String
        
        '''<remarks/>
        Public Property userName() As String
            Get
                Return Me.userNameField
            End Get
            Set
                Me.userNameField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property providerUserKey() As String
            Get
                Return Me.providerUserKeyField
            End Get
            Set
                Me.providerUserKeyField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property email() As String
            Get
                Return Me.emailField
            End Get
            Set
                Me.emailField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property passwordQuestion() As String
            Get
                Return Me.passwordQuestionField
            End Get
            Set
                Me.passwordQuestionField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property comment() As String
            Get
                Return Me.commentField
            End Get
            Set
                Me.commentField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isApproved() As Boolean
            Get
                Return Me.isApprovedField
            End Get
            Set
                Me.isApprovedField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isLockedOut() As Boolean
            Get
                Return Me.isLockedOutField
            End Get
            Set
                Me.isLockedOutField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lastLockoutDate() As Date
            Get
                Return Me.lastLockoutDateField
            End Get
            Set
                Me.lastLockoutDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property creationDate() As Date
            Get
                Return Me.creationDateField
            End Get
            Set
                Me.creationDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lastLoginDate() As Date
            Get
                Return Me.lastLoginDateField
            End Get
            Set
                Me.lastLoginDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lastActivityDate() As Date
            Get
                Return Me.lastActivityDateField
            End Get
            Set
                Me.lastActivityDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property lastPasswordChangedDate() As Date
            Get
                Return Me.lastPasswordChangedDateField
            End Get
            Set
                Me.lastPasswordChangedDateField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property isOnline() As Boolean
            Get
                Return Me.isOnlineField
            End Get
            Set
                Me.isOnlineField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property providerName() As String
            Get
                Return Me.providerNameField
            End Get
            Set
                Me.providerNameField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.7.2102.0"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://imis.com/webservices/membership")>  _
    Partial Public Class WebServiceProxyableSearchResult
        
        Private searchResultField() As WebServiceProxyableMembershipUser
        
        Private totalRecordsField As Integer
        
        '''<remarks/>
        Public Property SearchResult() As WebServiceProxyableMembershipUser()
            Get
                Return Me.searchResultField
            End Get
            Set
                Me.searchResultField = value
            End Set
        End Property
        
        '''<remarks/>
        Public Property TotalRecords() As Integer
            Get
                Return Me.totalRecordsField
            End Get
            Set
                Me.totalRecordsField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub LoginAndReturnSerializedAppPrincipalCompletedEventHandler(ByVal sender As Object, ByVal e As LoginAndReturnSerializedAppPrincipalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginAndReturnSerializedAppPrincipalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub LoginWithSerializedAppPrincipalCompletedEventHandler(ByVal sender As Object, ByVal e As LoginWithSerializedAppPrincipalCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginWithSerializedAppPrincipalCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As LogonResultCodes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LogonResultCodes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub LoginUserCompletedEventHandler(ByVal sender As Object, ByVal e As LoginUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As LogonResultCodes
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),LogonResultCodes)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub LoginUserAndProvideCookiesCompletedEventHandler(ByVal sender As Object, ByVal e As LoginUserAndProvideCookiesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class LoginUserAndProvideCookiesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ValidateUserCompletedEventHandler(ByVal sender As Object, ByVal e As ValidateUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ValidateUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetDatabaseInformationCompletedEventHandler(ByVal sender As Object, ByVal e As GetDatabaseInformationCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDatabaseInformationCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property server() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property database() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(2),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property username() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(3),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property password() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(4),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetRolesWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As GetRolesWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRolesWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetRolesCompletedEventHandler(ByVal sender As Object, ByVal e As GetRolesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRolesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUserTypeWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserTypeWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserTypeWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserType
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserType)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUserTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As UserType
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),UserType)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetLogonAnnouncementCompletedEventHandler(ByVal sender As Object, ByVal e As GetLogonAnnouncementCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLogonAnnouncementCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
        
        '''<remarks/>
        Public ReadOnly Property logonDelaySeconds() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(1),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub LogoutCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUserForAuthenticatedUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserForAuthenticatedUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserForAuthenticatedUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableMembershipUser
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableMembershipUser)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GeneratePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As GeneratePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GeneratePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub CreateImisUserWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As CreateImisUserWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateImisUserWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableMembershipUser
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableMembershipUser)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub CreateImisUserCompletedEventHandler(ByVal sender As Object, ByVal e As CreateImisUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateImisUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableMembershipUser
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableMembershipUser)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub RegisterWebUserCompletedEventHandler(ByVal sender As Object, ByVal e As RegisterWebUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class RegisterWebUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableMembershipUser
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableMembershipUser)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub DeleteImisUserWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteImisUserWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteImisUserWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub DeleteImisUserCompletedEventHandler(ByVal sender As Object, ByVal e As DeleteImisUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeleteImisUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUserWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableMembershipUser
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableMembershipUser)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUserCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableMembershipUser
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableMembershipUser)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetRequiresQuestionAndAnswerWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As GetRequiresQuestionAndAnswerWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRequiresQuestionAndAnswerWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetRequiresQuestionAndAnswerCompletedEventHandler(ByVal sender As Object, ByVal e As GetRequiresQuestionAndAnswerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetRequiresQuestionAndAnswerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ChangePasswordQuestionAndAnswerWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordQuestionAndAnswerWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordQuestionAndAnswerWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ChangePasswordQuestionAndAnswerCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordQuestionAndAnswerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordQuestionAndAnswerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub UnlockUserWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As UnlockUserWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnlockUserWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub UnlockUserCompletedEventHandler(ByVal sender As Object, ByVal e As UnlockUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UnlockUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ResetPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub RequestLogonRecoverCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub RequestPasswordResetCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUserPasswordResetTokenCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserPasswordResetTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserPasswordResetTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUserKeyFromPasswordResetTokenCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserKeyFromPasswordResetTokenCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserKeyFromPasswordResetTokenCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As System.Guid
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),System.Guid)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ChangeUsernameWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeUsernameWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeUsernameWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ChangeUsernameCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeUsernameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeUsernameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ChangeUsernameForUserWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeUsernameForUserWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeUsernameForUserWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ChangeUsernameForUserCompletedEventHandler(ByVal sender As Object, ByVal e As ChangeUsernameForUserCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangeUsernameForUserCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUsernameChangesEnabledCompletedEventHandler(ByVal sender As Object, ByVal e As GetUsernameChangesEnabledCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUsernameChangesEnabledCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ChangePasswordWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub ChangePasswordCompletedEventHandler(ByVal sender As Object, ByVal e As ChangePasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ChangePasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub SetUserPasswordWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As SetUserPasswordWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetUserPasswordWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub SetUserPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As SetUserPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetUserPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub SetUserPassword2CompletedEventHandler(ByVal sender As Object, ByVal e As SetUserPassword2CompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SetUserPassword2CompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub UpdateUserWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub UpdateUserCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub FindUsersByNameWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As FindUsersByNameWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindUsersByNameWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableSearchResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableSearchResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub FindUsersByNameCompletedEventHandler(ByVal sender As Object, ByVal e As FindUsersByNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindUsersByNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableSearchResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableSearchResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetAllUsersWithLoginCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllUsersWithLoginCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllUsersWithLoginCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableSearchResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableSearchResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetAllUsersCompletedEventHandler(ByVal sender As Object, ByVal e As GetAllUsersCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAllUsersCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As WebServiceProxyableSearchResult
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),WebServiceProxyableSearchResult)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub SetPropertyValueCompletedEventHandler(ByVal sender As Object, ByVal e As System.ComponentModel.AsyncCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetPropertyTypeCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertyTypeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertyTypeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetPropertyValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetPropertyValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPropertyValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetIsAnonymousCompletedEventHandler(ByVal sender As Object, ByVal e As GetIsAnonymousCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIsAnonymousCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetLastActivityDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetLastActivityDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLastActivityDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetLastUpdatedDateCompletedEventHandler(ByVal sender As Object, ByVal e As GetLastUpdatedDateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetLastUpdatedDateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Date
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Date)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0")>  _
    Public Delegate Sub GetUserNameCompletedEventHandler(ByVal sender As Object, ByVal e As GetUserNameCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.7.2046.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetUserNameCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
